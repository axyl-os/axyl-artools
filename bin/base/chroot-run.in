#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

chroot_version=0.9

. @libdir@/artools/util-base.sh

# umask might have been changed in /etc/profile
# ensure that sane default is set again
umask 0022

working_dir=''
files=()

usage() {
    echo "Usage: ${0##*/} [options] working-dir [run arguments]"
    echo "A wrapper around chroot. Provides support for pacman."
    echo
    echo ' options:'
    echo '    -C <file>     Location of a pacman config file'
    echo '    -M <file>     Location of a makepkg config file'
    echo '    -c <dir>      Set pacman cache'
    echo '    -f <file>     Copy file from the host to the chroot'
    echo '    -s            Do not run setarch'
    echo '    -r <list>     Bind mountargs ro'
    echo '    -w <list>     Bind mountargs rw'
    echo '                  List format [src1:target1 ... srcN:targetN]'
    echo '    -h            This message'
    exit 1
}

orig_argv=("$0" "$@")

opts='hC:M:c:r:w:f:s'

while getopts ${opts} arg; do
    case "${arg}" in
        C) pacman_conf="$OPTARG" ;;
        M) makepkg_conf="$OPTARG" ;;
        c) cache_dirs+=("$OPTARG") ;;
        f) files+=("$OPTARG") ;;
        s) nosetarch=1 ;;
        r) bindmounts_ro=("$OPTARG") ;;
        w) bindmounts_rw=("$OPTARG") ;;
        h|?) usage ;;
        *) error "invalid argument '$arg'"; usage ;;
    esac
done
shift $(($OPTIND - 1))

(( $# < 1 )) && die 'You must specify a directory.'

check_root

working_dir=$(readlink -f "$1")
shift 1

[[ -z $working_dir ]] && die 'Please specify a working directory.'

pacconf_cmd=$(command -v pacman-conf || command -v pacconf)

if (( ${#cache_dirs[@]} == 0 )); then
    mapfile -t cache_dirs < <($pacconf_cmd --config "${pac_conf:-$working_dir/etc/pacman.conf}" CacheDir)
fi

host_mirrors=($($pacconf_cmd --repo world Server 2> /dev/null | sed -r 's#(.*/)world/os/.*#\1$repo/os/$arch#'))

while read -r line; do
    mapfile -t lines < <($pacconf_cmd --config "${pac_conf:-$working_dir/etc/pacman.conf}" \
        --repo $line Server | sed -r 's#(.*/)[^/]+/os/.+#\1$repo/os/$arch#')
    if [[ ${lines[0]} != ${host_mirrors[0]} ]]; then
        for line in "${lines[@]}"; do
            if [[ $line = file://* ]]; then
                line=${line#file://}
                in_array "$line" "${cache_dirs[@]}" || cache_dirs+=("$line")
            fi
        done
    fi
done < <($pacconf_cmd --config "${pac_conf:-$working_dir/etc/pacman.conf}" --repo-list)

copy_hostconf () {
    unshare --fork --pid gpg --homedir "$working_dir"/etc/pacman.d/gnupg/ --no-permission-warning --quiet --batch --import --import-options import-local-sigs "$(pacman-conf GpgDir)"/pubring.gpg >/dev/null 2>&1
    pacman-key --gpgdir "$working_dir"/etc/pacman.d/gnupg/ --import-trustdb "$(pacman-conf GpgDir)" >/dev/null 2>&1

    printf 'Server = %s\n' "${host_mirrors[@]}" >"$working_dir/etc/pacman.d/mirrorlist"

    [[ -n $pacman_conf ]] && cp $pacman_conf "$1/etc/pacman.conf"

    [[ -n $makepkg_conf ]] && cp $makepkg_conf "$1/etc/makepkg.conf"

    local file
    for file in "${files[@]}"; do
        mkdir -p "$(dirname "$working_dir$file")"
        cp -T "$file" "$working_dir$file"
    done

    sed -r "s|^#?\\s*CacheDir.+|CacheDir = ${cache_dirs[*]}|g" -i "$1/etc/pacman.conf"
}

chroot_extra_mount() {
    chroot_add_resolv_conf "$1"
    chroot_mount "/etc/hosts" "$1/etc/hosts" -B
    chroot_mount "${cache_dirs[0]}" "$1${cache_dirs[0]}" -B

    for cache_dir in ${cache_dirs[@]:1}; do
        chroot_mount "$cache_dir" "$1${cache_dir}" -Br
    done

    for m in ${bindmounts_ro[@]}; do
        chroot_mount "${m%%:*}" "$1${m##*:}" -Br
    done

    for m in ${bindmounts_rw[@]}; do
        chroot_mount "${m%%:*}" "$1${m##*:}" -B
    done

    for host_mirror in "${host_mirrors[@]}"; do
        if [[ $host_mirror == *file://* ]]; then
            host_mirror_path=$(echo "$host_mirror" | sed -r 's#file://(/.*)/\$repo/os/\$arch#\1#g')
            chroot_mount "$host_mirror_path" "$1$host_mirror_path" -Br
        fi
    done
}

sync_host_localtime(){
    if [[ -e /etc/localtime ]]; then
        cp -L /etc/localtime "$1"/etc/localtime
    fi
}

umask 0022

# Sanity check
if [[ ! -f "$working_dir/.artools" ]]; then
    die "'%s' does not appear to be an artix chroot." "$working_dir"
elif [[ $(cat "$working_dir/.artools") != ${CHROOTVERSION} ]]; then
    die "chroot '%s' is not at version %s. Please rebuild." "$working_dir" "${CHROOTVERSION}"
fi

sync_host_localtime "${working_dir}"

chroot_api_mount "${working_dir}" || die "failed to setup API filesystems in chroot %s" "${working_dir}"

chroot_extra_mount "${working_dir}"

copy_hostconf "${working_dir}"

eval $(grep '^CARCH=' "$working_dir/etc/makepkg.conf")

[[ -z $nosetarch ]] || unset CARCH

${CARCH:+setarch "$CARCH"} chroot "${working_dir}" "$@"

ret=$?

kill_chroot_process "${working_dir}"

exit $ret
