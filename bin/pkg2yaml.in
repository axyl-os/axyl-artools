#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

VERSION=@version@

LIBDIR='@libdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util-yaml.sh

LIBRARY=${LIBRARY:-'/usr/share/makepkg'}

for lib in "$LIBRARY"/*.sh; do
    source "$lib"
done
source /etc/makepkg.conf

write_attr(){
    local ident1="$1" ident2="$2" ident3="$3"
    local attrname=$4 attrvalues=("${@:5}")

    # normalize whitespace, strip leading and trailing
    attrvalues=("${attrvalues[@]//+([[:space:]])/ }")
    attrvalues=("${attrvalues[@]#[[:space:]]}")
    attrvalues=("${attrvalues[@]%[[:space:]]}")

    case $attrname in
        makedepends|checkdepends|depends|provides|arch)
            Yaml+=$(write_yaml_map $ident1 "$attrname")
            for v in ${attrvalues[@]};do
                Yaml+=$(write_yaml_seq $ident2 "$v")
            done
        ;;
        *)
            for v in ${attrvalues[@]};do
                Yaml+=$(write_yaml_map $ident3 "$attrname" "$v")
            done
        ;;
    esac
}

extract_info() {
    local pkgname=$1 attrname=$2 isarray=$3 outvalue=

    if get_pkgbuild_attribute "$pkgname" "$attrname" "$isarray" 'outvalue'; then
        [[ -z $pkgname ]] && write_attr 2 4 2 "$attrname" "${outvalue[@]}"
        [[ -n $pkgname ]] && write_attr 4 6 2 "$attrname" "${outvalue[@]}"
    fi
}

write_details() {
    local attr package_arch a
    local multivalued_arch_attrs=(provides depends makedepends checkdepends)

    local singlevalued=()
    local multivalued=(arch provides depends checkdepends)

    if [[ -z "$1" ]];then
        singlevalued=(pkgver pkgrel epoch)
        multivalued=(arch provides depends makedepends checkdepends)
    fi

    for attr in "${singlevalued[@]}"; do
        extract_info "$1" "$attr" 0
    done

    for attr in "${multivalued[@]}"; do
        extract_info "$1" "$attr" 1
    done

    get_pkgbuild_attribute "$1" 'arch' 1 'package_arch'
    for a in "${package_arch[@]}"; do
        # 'any' is special. there's no support for, e.g. depends_any.
        [[ $a = any ]] && continue

        for attr in "${multivalued_arch_attrs[@]}"; do
            extract_info "$1" "${attr}_$a" 1
        done
    done
}

write_pkg_yaml(){
    local pkgfile=$(print_all_package_names)

    Yaml=$(write_yaml_header)

    Yaml+=$(write_empty_line)

    Yaml+=$(write_yaml_map 0 "pkgbase")
    Yaml+=$(write_yaml_map 2 "pkgname" "${pkgbase:-$pkgname}")
    ${details} && write_details ''

    Yaml+=$(write_empty_line)

    Yaml+=$(write_yaml_map 0 "package")
    for pkg in "${pkgname[@]}"; do
        Yaml+=$(write_yaml_seq_map 2 "pkgname" "$pkg")
        ${details} && write_details "$pkg"
    done

    Yaml+=$(write_empty_line)

    Yaml+=$(write_yaml_map 0 "pkgfile")
    for f in ${pkgfile[@]};do
        Yaml+=$(write_yaml_seq 2 "${f##*/}")
    done

    Yaml+=$(write_empty_line)

    printf '%s' "${Yaml}"
}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -d            Don't include details"
    echo '    -h            This help'
    echo ''
    exit $1
}

details=true

opts='dh'

while getopts "${opts}" arg; do
    case "${arg}" in
        d) details=false ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( $OPTIND - 1 ))

[[ -f "$1"/PKGBUILD ]] || die "%s/PKGBUILD does not exist!" "$1"
PACKAGE=$1/PKGBUILD; shift

source "$PACKAGE"

write_pkg_yaml
