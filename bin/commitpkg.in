#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh
import ${LIBDIR}/util-pkg-gitea.sh

commit_pkg(){
    local git_tree=$(find_tree "${tree_dir_artix}" "${package}")
    if [[ -n ${git_tree} ]];then
        cd ${tree_dir_artix}/${git_tree}/${package}

        source trunk/PKGBUILD
        [[ $arch == 'any' ]] && CARCH=any
        local ver=$(get_full_version "${package}")
        local commit_msg=""

        if ${remove};then
            local action='remove'
            if [[ "${source_repo}" == 'trunk' ]];then
                local pkg=${package}
                git rm -r trunk
            else
                local pkg="${package}-$ver"
                git rm -r repos/"${source_repo}-$CARCH"
            fi
            msg "Action: [%s] '%s' %s" "${source_repo}" "$pkg" "${action}"
            commit_msg="[${source_repo}] '$pkg' ${action}"
        else
            local action='modify'
            msg "Action: [%s] '%s' %s" "${source_repo}" "${package}-$ver" "${action}"
            git add .
            commit_msg="[${source_repo}] '${package}-$ver' ${action}"
        fi
        git commit -m "$commit_msg"

        cd ${tree_dir_artix}/${git_tree}
        subrepo_pull "${package}"
        subrepo_push "${package}"

        git add ${package}/.gitrepo
        git commit -m "$commit_msg"

        if ${push};then
            msg "Checking (%s)" "${git_tree}"
            git pull origin master
            git push origin master
        fi
    else
        error "Package '%s' does not exist!" "${package}"
    fi
}

symlink_commit_pkg(){
    local git_tree=$(find_tree "${tree_dir_artix}" "${package}")
    if [[ -n ${git_tree} ]];then
        cd ${tree_dir_artix}/${git_tree}/${package}

        source trunk/PKGBUILD
        [[ $arch == 'any' ]] && CARCH=any
        local ver=$(get_full_version "${package}")

        if [[ ${source_repo} == 'trunk' ]];then
            local action='add'
            local dest="${target_repo}-$CARCH"

            [[ -d repos/$dest ]] && git rm -r repos/$dest
            [[ ! -d repos ]] && mkdir repos
            [[ ! -d repos/$dest ]] && mkdir repos/$dest

            cp trunk/* repos/$dest/
        else
            local action='move'
            local src="${source_repo}-$CARCH" dest="${target_repo}-$CARCH"

            [[ -d repos/$dest ]] && git rm -r repos/$dest
            [[ ! -d repos ]] && mkdir repos
            [[ ! -d repos/$dest ]] && mkdir repos/$dest

            cp repos/$src/* repos/$dest/
            git rm -r repos/$src
        fi
        msg "Action: [%s] -> [%s] '%s' %s" "${source_repo}" "${target_repo}" "${package}-$ver" "${action}"
        local commit_msg="[${source_repo}] -> [${target_repo}] '${package}-$ver' ${action}"
        git add .
        git commit -m "$commit_msg"

        cd ${tree_dir_artix}/${git_tree}
        subrepo_pull "${package}"
        subrepo_push "${package}"

        git add ${package}/.gitrepo
        git commit -m "$commit_msg"

        if ${push};then
            msg "Checking (%s)" "${git_tree}"
            git pull origin master
            git push origin master
        fi
    else
        error "Package '%s' does not exist!" "${package}"
    fi
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "source_repo: %s" "${source_repo}"
    msg2 "target_repo: %s" "${target_repo}"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "remove: %s" "${remove}"
    msg2 "push: %s" "${push}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

source_repo='trunk'
package=''
remove=false
push=false
pretend=false

cmd=${0##*/}
target_repo=${cmd%pkg}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -s <name>          Source repository [default:${source_repo}]"
    echo '    -p <pkg>           Package name'
    echo '    -r                 Delete from repo (commitpkg only)'
    echo '    -u                 Push'
    echo '    -q                 Query settings and pretend'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:s:urqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        s) source_repo="$OPTARG" ;;
        p) package="$OPTARG" ;;
        r) remove=true ;;
        u) push=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

${pretend} && display_settings && exit 1

if $(is_valid_repo "${source_repo}");then
    if [[ "${cmd}" == 'commitpkg' ]];then
        commit_pkg
    else
        symlink_commit_pkg
    fi
else
    error "source repository '%s' is not valid!" "${source_repo}"
fi
