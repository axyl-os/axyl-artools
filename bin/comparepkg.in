#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

VERSION=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh

show_version_table(){
    msg_table_header "%-20s %-20s %-25s %-30s %-30s" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version"

    for tree in ${tree_names[@]};do

        local git=$(find ${TREE_DIR_ARTIX}/$tree/ -mindepth 1 -maxdepth 1 -type d)

        for package in ${git[@]}; do

            local pkg=${package##*/}
            local artixrepo=$(find_repo "$package" "${unstable}" "${staging}")
            local artixshow=${artixrepo%-*}
            local pkgbuild=$package/repos/$artixrepo/PKGBUILD

            if [[ -f $pkgbuild ]];then

                source $pkgbuild 2>/dev/null
                local artixver=$(get_full_version $pkg)

                local archpath=$(get_import_path "$pkg")
                local archrepo=$(find_repo "$archpath" "${unstable}" "${staging}")
                local archshow=${archrepo%-*}
                pkgbuild=$archpath/repos/$archrepo/PKGBUILD

                if [[ -f $pkgbuild ]];then
                    source $pkgbuild 2>/dev/null
                    local archver=$(get_full_version $pkg)
                fi

                if ${move};then

                    if [ $(vercmp "$artixver" "$archver") -eq 0 ] || [ $(vercmp "$artixver" "$archver") -gt 0 ];then
                        case $artixrepo in
                            *staging*)
                                if [[ "$archrepo" == "$artixrepo" ]];then
                                    msg_row "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                else
                                    msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                fi
                            ;;
                            *testing*)
                                if [[ "$archrepo" == "$artixrepo" ]];then
                                    msg_row "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                else
                                    msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                fi
                            ;;
                        esac
                    fi

                else

                    if [ $(vercmp "$artixver" "$archver") -lt 0 ];then
                        ${upgrades} && msg_row_upgrade "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                    fi

                    if [ $(vercmp "$artixver" "$archver") -gt 0 ];then
                        if [[ -n $archver ]] && [[ -n $archrepo ]];then
                            ${downgrades} && msg_row_downgrade "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                        fi
                    fi

                fi
                unset pkgver epoch pkgrel artixver archver

            fi
        done
    done
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

unstable=false
staging=true
upgrades=false
downgrades=false
move=false

tree_names=(packages community)

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -c            Compare packages'
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -a            Show testing packages'
    echo "    -y            Don't inlcude staging packages"
    echo '    -x            Include unstable kde and gnome'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='udmyxh'

while getopts "${opts}" arg; do
    case "${arg}" in
        u) upgrades=true ;;
        d) downgrades=true ;;
        m) move=true ;;
        y) staging=false ;;
        x) unstable=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

show_version_table
