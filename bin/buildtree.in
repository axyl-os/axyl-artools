#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh
import ${LIBDIR}/util-pkg-gitea.sh
import ${LIBDIR}/util-pkg-subrepo.sh

pull_tree_arch(){
    cd ${tree_dir_arch}
    for tree in packages community;do
        if [[ -d ${tree} ]];then
            cd ${tree}
            msg "Checking (%s)" "${tree}"
            pull_tree
            cd ..
        else
            msg "Cloning (%s) ..." "$tree"
            clone_tree "${host_tree_arch}/${tree}"
        fi
    done
}

config_tree(){
    local tree="$1"
    cd $tree
        git config --bool pull.rebase true
        git config commit.gpgsign true
        if [[ -n "${GPGKEY}" ]];then
            git config user.signingkey "${GPGKEY}"
        else
            warning "No GPGKEY configured in makepkg.conf!"
        fi
    cd ..
}

pull_tree_artix(){
    cd ${tree_dir_artix}
    for tree in packages packages-galaxy;do
        if [[ -d ${tree} ]];then
            config_tree "${tree}"
            cd ${tree}
            msg "Checking (%s)" "${tree}"
            pull_tree
            cd ..
        else
            msg "Cloning (%s) ..." "$tree"
            clone_tree "${host_tree_artix}/${tree}"
            config_tree "${tree}"
        fi
    done
}

show_version_table(){
    msg_table_header "%-20s %-20s %-25s %-30s %-30s" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version"
    for tree in packages packages-galaxy;do
        local git=$(find ${tree_dir_artix}/$tree/ -mindepth 1 -maxdepth 1 -type d)
        for pkg_path in ${git[@]}; do
            local artixrepo=$(find_repo "$pkg_path" "${unstable}" "${staging}")
            if [[ -d $pkg_path/repos/$artixrepo ]];then
                source $pkg_path/repos/$artixrepo/PKGBUILD 2>/dev/null
                local pkg=${pkg_path##*/}
                local artixver=$(get_full_version $pkg)
                local src=$(get_import_path "$tree" "$pkg")
                local archrepo=$(find_repo "$src/$pkg" "${unstable}" "${staging}")
                if [[ -d $src/$pkg/repos/$archrepo ]];then
                    source $src/$pkg/repos/$archrepo/PKGBUILD 2>/dev/null
                    local archver=$(get_full_version $pkg)
                fi
                if ${artix};then
                    if [ $(vercmp "$artixver" "$archver") -eq 0 ] || [ $(vercmp "$artixver" "$archver") -gt 0 ];then
                        local ar=$(arch_to_artix_repo "$artixrepo")
                        case $ar in
                            *goblins)
                                if [[ "$archrepo" == "$artixrepo" ]];then
                                    msg_row "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                                else
                                    msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                                fi
                            ;;
                            *gremlins)
                                if [[ "$archrepo" == "$artixrepo" ]];then
                                    msg_row "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                                else
                                    msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                                fi
                            ;;
                        esac
                    fi
                else
                    if [ $(vercmp "$artixver" "$archver") -lt 0 ];then
                        local ar=$(arch_to_artix_repo "$artixrepo")
                        ${upgrades} && msg_row_upgrade "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                    fi
                    if [ $(vercmp "$artixver" "$archver") -gt 0 ];then
                        local ar=$(arch_to_artix_repo "$artixrepo")
                        if [[ -n $archver ]] && [[ -n $archrepo ]];then
                            ${downgrades} && msg_row_downgrade "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                        fi
                    fi
                fi
                unset pkgver epoch pkgrel artixver archver _package
            fi
        done
    done
}

show_deps(){
    local src="$1" repo="$2"
    source $src/PKGBUILD 2>/dev/null
    [[ $arch == 'any' ]] && CARCH=any
    local archver=$(get_full_version $pkg)
    msg "git tree: %s" "$git_tree_arch"
    msg2 "repo: %s" "$repo"
    msg2 "Package Name: %s" "$pkg"
    msg2 "Arch Version: %s" "$archver"
    msg2 "arch: %s" "$CARCH"
    [[ -n ${makedepends[@]} ]] && msg2 "makedepends: %s" "${makedepends[*]}"
    [[ -n ${checkdepends[@]} ]] && msg2 "checkdepends: %s" "${checkdepends[*]}"
    [[ -n ${depends[@]} ]] && msg2 "depends: %s" "${depends[*]}"
    [[ -n ${optdepends[@]} ]] && msg2 "optdepends: %s" "${optdepends[@]}"
}

from_arch(){
    local pkg="$1" src= dest=
    local git_tree_arch=$(find_tree "${tree_dir_arch}" "$pkg")
    [[ -z $git_tree_arch ]] && die "Package '%s' does not exist!" "$pkg"

    local pkg_path=${tree_dir_arch}/$git_tree_arch/$pkg
    local repo=$(find_repo "$pkg_path" "${unstable}")

    src=$pkg_path/repos/$repo
    $trunk && src=$pkg_path/trunk

    local git_tree_artix=$(find_tree "${tree_dir_artix}" "$pkg")
    dest=${tree_dir_artix}/$git_tree_artix/$pkg/trunk

    cd ${tree_dir_arch}/$git_tree_arch

    show_deps "$src" "$repo"

    if [[ -d $dest ]];then
        cd ${tree_dir_artix}/$git_tree_artix

        source $dest/PKGBUILD 2>/dev/null
        local artixver=$(get_full_version $pkg)

        msg2 "Artix Version: %s" "$artixver"
        info "Update from archlinux (%s)" "$git_tree_arch"
        rsync "${rsync_args[@]}" $src/ $dest/
        patch_pkg "$pkg" "$tree"
    else
        [[ $git_tree_arch == 'packages' ]] && git_tree_artix=$git_tree_arch
        [[ $git_tree_arch == 'community' ]] && git_tree_artix='packages-galaxy'

        cd ${tree_dir_artix}/$git_tree_artix

        dest=${tree_dir_artix}/$git_tree_artix/$pkg/trunk

        create_repo "$pkg"
        add_repo_to_team "$pkg" "$pkg_path"
        subrepo_clone "$pkg"

        info "Import from archlinux (%s)" "$git_tree_arch"
        rsync "${rsync_args[@]}" $src/ $dest/
        patch_pkg "$pkg" "$tree"
    fi
}

view_build(){
    local pkg="$1" src=
    local git_tree_arch=$(find_tree "${tree_dir_arch}" "$pkg")
    [[ -z $git_tree_arch ]] && die "Package '%s' does not exist!" "$pkg"

    local pkg_path=${tree_dir_arch}/$git_tree_arch/$pkg
    local repo=$(find_repo "$pkg_path" "${unstable}")

    src=$pkg_path/repos/$repo

    show_deps "$src" "$repo"
}

sync_repos(){
    ${sync_arch} && pull_tree_arch
    pull_tree_artix
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "sync: %s" "${sync}"
    msg2 "sync_arch: %s" "${sync_arch}"
    msg2 "compare: %s" "${compare}"
    msg2 "upgrades: %s" "${upgrades}"
    msg2 "downgrades: %s" "${downgrades}"
    msg2 "artix: %s" "${artix}"
    msg2 "staging: %s" "${staging}"
    msg2 "unstable: %s" "${unstable}"
    msg2 "import: %s" "${import}"
    msg2 "view: %s" "${view}"
    msg2 "trunk: %s" "${trunk}"

    msg "PATHS:"
    msg2 "tree_dir_artix: %s" "${tree_dir_artix}"
    msg2 "tree_dir_arch: %s" "${tree_dir_arch}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

pretend=false
sync=false
sync_arch=true
compare=false
unstable=false
staging=true
upgrades=false
downgrades=false
artix=false
import=false
view=false
trunk=false
package=''

rsync_args=(-aWxvci --progress --delete-before --no-R --no-implied-dirs)

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -p <pkg>      Package name'
    echo "    -s            Clone or pull repos"
    echo "    -z            Don't clone or pull arch repos"
    echo '    -c            Compare packages'
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -a            Show testing packages'
    echo "    -y            Don't inlcude staging packages"
    echo '    -x            Include unstable kde and gnome'
    echo '    -i            Import a package from arch repos'
    echo '    -t            Import from arch trunk'
    echo '    -v            View package depends'
    echo '    -q            Query settings'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:csudayiztxvqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) package="$OPTARG" ;;
        s) sync=true ;;
        z) sync_arch=false ;;
        c) compare=true ;;
        u) upgrades=true ;;
        d) downgrades=true ;;
        a) artix=true ;;
        y) staging=false ;;
        i) import=true ;;
        t) trunk=true ;;
        v) view=true ;;
        x) unstable=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

prepare_dir "${tree_dir_artix}"
prepare_dir "${tree_dir_arch}"

${pretend} && display_settings && exit 1

${sync} && sync_repos

${view} && view_build "${package}"

${compare} && show_version_table

${import} && from_arch "${package}"
