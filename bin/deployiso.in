#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh

connect(){
    local home="/home/frs/project/${project}"
    echo "${account},${project}@frs.${file_host}:${home}"
}

prepare_transfer(){
    target_dir="/iso/${profile}/"
    src_dir="${iso_pool}/${profile}/"
}

sync_dir(){
    msg "Start upload [%s] ..." "${profile}"
    rsync "${rsync_args[@]}" ${src_dir} $(connect)${target_dir}
    msg "Done upload [%s]" "${profile}"
    show_elapsed_time "${FUNCNAME}" "${timer_start}"
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "profile: %s" "${profile}"
    msg2 "uplimit: %s kB/s" "${uplimit}"

    msg "ARGS:"
    msg2 "update: %s" "${update}"
    msg2 "verbose: %s" "${verbose}"

    msg "REMOTE:"
    msg2 "account: %s" "${account}"
    msg2 "file_host: %s" "${file_host}"
    msg2 "project: %s" "${project}"

    msg "UPLOAD:"
    msg2 "src_dir: ${src_dir}"
    msg2 "target_dir: ${target_dir}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"

pretend=false
update=false
verbose=false

rsync_args=(-aP --progress -e ssh)

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -p                 Source folder to upload [default: ${profile}]"
    echo "    -l                 Limit bandwidth in kB/s [default:${uplimit}]"
    echo '    -u                 Update remote directory'
    echo '    -q                 Query settings and pretend upload'
    echo '    -v                 Verbose output'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

opts='p:l:uvqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) profile="$OPTARG" ;;
        l) uplimit="$OPTARG" ;;
        u) update=true; rsync_args+=(-u) ;;
        v) verbose=true; rsync_args+=(-v --stats) ;;
        q) pretend=true; rsync_args+=(-n) ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

timer_start=$(get_timer)

rsync_args+=(--bwlimit=${uplimit})

prepare_transfer

${pretend} && display_settings #&& exit 1

sync_dir
