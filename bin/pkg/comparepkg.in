#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

. @libdir@/artools/util-base.sh
. @libdir@/artools/util-pkg.sh

show_version_table(){
    msg_table_header "%-20s %-20s %-25s %-30s %-30s" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version"

    for tree in ${TREE_NAMES_ARTIX[@]};do

        local git=$(find ${TREE_DIR_ARTIX}/$tree/ -mindepth 1 -maxdepth 1 -type d)

        for package in ${git[@]}; do

            local pkg=${package##*/}
            local artixrepo=$(find_repo "$package" "${staging}" "${unstable}")
            local artixshow=${artixrepo%-*}
            local pkgbuild=$package/repos/$artixrepo/PKGBUILD

            if [[ -f $pkgbuild ]];then

                . $pkgbuild 2>/dev/null
                local artixver=$(get_full_version $pkg)

                local archpath=$(get_import_path $pkg)

                local archrepo=$(find_repo "$archpath" "${staging}" "${unstable}")

                local archshow=${archrepo%-*}
                pkgbuild=$archpath/$archrepo/PKGBUILD

                if [[ -f $pkgbuild ]];then
                    . $pkgbuild 2>/dev/null
                    local archver=$(get_full_version $pkg)
                fi

                local result=$(vercmp "$artixver" "$archver")

                local repomatch=false
                [[ "$archrepo" == "$artixrepo" ]] && repomatch=true

                if ${move};then

                    if [ $result -gt -1 ];then
                        case $artixrepo in
                            *testing*|*staging*)
                                if $repomatch;then
                                    msg_row "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                else
                                    msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                                fi
                            ;;
                        esac
                    fi

                elif ${upgrades};then

                    if [ $result -eq -1 ];then
                        msg_row_upgrade "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                    fi

                elif ${downgrades};then

                    if [ $result -eq 1 ];then
                        if [[ -n $archver ]] && [[ -n $archrepo ]];then
                            msg_row_downgrade "%-20s %-20s %-25s %-30s %-30s" "$archshow" "$artixshow" "$pkg" "$archver" "$artixver"
                        fi
                    fi

                fi
                unset pkgver epoch pkgrel artixver archver pkgbuild archpath

            fi
        done
    done
}

load_user_info

load_config "${USERCONFDIR}/artools/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${USERCONFDIR}/pacman/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

unstable=false
staging=true
upgrades=false
downgrades=false
move=false

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -m            Show packages to move'
    echo "    -x            Don't inlcude staging packages"
    echo '    -y            Include unstable kde and gnome'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='udmxyh'

while getopts "${opts}" arg; do
    case "${arg}" in
        u) upgrades=true ;;
        d) downgrades=true ;;
        m) move=true ;;
        x) staging=false ;;
        y) unstable=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

show_version_table
