#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/base/message.sh)
m4_include(lib/base/common.sh)
m4_include(lib/pkg/repo.sh)
m4_include(lib/util-base.sh)
m4_include(lib/util-pkg.sh)

#{{{ table

msg_table_header(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${BLUE} ${mesg} ${ALL_OFF}\n" "$@" >&2
}

msg_row_downgrade(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${YELLOW} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg_row_notify(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${GREEN} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg_row(){
    local mesg=$1; shift
#     printf "${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
    # shellcheck disable=2059
    printf "${WHITE} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg_row_upgrade(){
    local mesg=$1; shift
    # shellcheck disable=2059
    printf "${RED} ${mesg} ${ALL_OFF}\n" "$@" >&2
}

#}}}

#{{{ upgrades, downgrades, moves

compare_m(){
    result=$(vercmp "$artixver" "$archver")
    case ${artixrepo} in
        *testing*|*staging*|*rebuild)
            if [[ "${a}" == "${b}" ]] || [[ "${a}" == 'staging' && "${b}" == 'rebuild' ]]; then
                msg_row "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
            else
                msg_row_notify "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
                if [[ -n "$archrepo" ]]; then
                    printf "%s\n" "${a}:${b}:$pkg" >> "${TREE_DIR_ARTIX}"/pkg_moves.list
                fi
            fi
        ;;
    esac
}

compare_u(){
    result=$(vercmp "$artixver" "$archver")
    if [ "$result" -eq -1 ];then
        msg_row_upgrade "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
        printf "%s\n" "${a}:$pkg" >> "${TREE_DIR_ARTIX}"/pkg_upgrades.list
    fi
}

compare_d(){
    result=$(vercmp "$artixver" "$archver")
    if [ "$result" -eq 1 ];then
        if [[ -n "$archver" ]] && [[ -n "$archrepo" ]];then
            msg_row_downgrade "${table}" "${a}" "${b}" "$pkg" "$archver" "$artixver" "${group#*-}"
        fi
    fi
}

get_archpath(){
    local pkg="$1" archpath

    for tree in "${ARCH_TREE[@]}"; do
        [[ -d ${TREE_DIR_ARCH}/$tree/$pkg/repos ]] && archpath=${TREE_DIR_ARCH}/$tree/$pkg
    done
    echo "$archpath"
}

pre_compare(){
    local func="$1" pkgpath="$2" result group
    group="${pkgpath%/*}"
    group=${group##*/}

    local pkg artixrepo archrepo pkgbuild artixver archver archpath node a b
    pkg=${pkgpath##*/}
    artixrepo=$(find_repo "$pkgpath")
    pkgbuild=$pkgpath/$artixrepo/PKGBUILD

    if [[ -f $pkgbuild ]]; then
        # shellcheck disable=1090
        . "$pkgbuild" 2>/dev/null
        artixver=$(get_full_version)
        archpath=$(get_archpath "$pkg")
        archrepo=$(find_repo "${archpath}")
        pkgbuild=$archpath/$archrepo/PKGBUILD
        node=${artixrepo%/*}
        a=${archrepo#*/} b=${artixrepo#*/}
        a="${a%-*}"

        [[ "$node" != "$CARCH" ]] && b=${b%-*}

        if [[ -f "$pkgbuild" ]]; then
            # shellcheck disable=1090
            . "$pkgbuild" 2>/dev/null
            archver=$(get_full_version)
        fi

        "$func"

        unset pkgver epoch pkgrel artixver archver pkgbuild archpath
    fi
}

compare_upgrades(){
    local pkgpath="${1%/*}"
    pre_compare compare_u "$pkgpath"
}

compare_downgrades(){
    local pkgpath="${1%/*}"
    pre_compare compare_d "$pkgpath"
}

compare_move(){
    local pkgpath="${1%/*}"
    pre_compare compare_m "$pkgpath"
}

#}}}

#{{{ functions

tree_loop(){
    local func="$1"
    for tree in "${ARTIX_TREE[@]}"; do
        for package in $(find "${TREE_DIR_ARTIX}/$tree" -name trunk); do
            "$func" "$package"
        done
    done
}

show_compare_header(){
    msg_table_header "${table}" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version" "Group"
}

show_upgrades_table(){
    show_compare_header
    [[ -f "${TREE_DIR_ARTIX}"/pkg_upgrades.list ]] && rm "${TREE_DIR_ARTIX}"/pkg_upgrades.list
    tree_loop compare_upgrades
}

show_downgrades_table(){
    show_compare_header
    tree_loop compare_downgrades
}

show_move_table(){
    show_compare_header
    [[ -f "${TREE_DIR_ARTIX}"/pkg_moves.list ]] && rm "${TREE_DIR_ARTIX}"/pkg_moves.list
    tree_loop compare_move
}

update_db_cache(){
    msg "Updating database cache"
    for repo in "${searchrepos[@]}"; do
        local cachedir=${db_cache_dir}/${LINKSDBEXT}/${CARCH}/${repo}
        rm -rf "$cachedir"
        mkdir -p "$cachedir"
        msg2 "%s" "$repo"
        curl -L -s "${REPOS_MIRROR}/${repo}/os/${CARCH}/${repo}.${LINKSDBEXT}" \
            | bsdtar -xf - -C "$cachedir"
    done
    msg "Done"
}

#}}}

#{{{ sogrep

query_db() {
    for repo in "${searchrepos[@]}"; do
        local db=${db_cache_dir}/${LINKSDBEXT}/${CARCH}/${repo}/
        if [[ -d ${db} ]]; then
            while read -rd '' pkg; do
                read -r match
                pkg=${pkg#${db}}
                pkg="${pkg%/*}"
                msg_row "${tableQ}" "${repo}" "${pkg}" "${match}"
            done < <(grep -rZ "${library}" "${db}") | sort -u
        fi
    done
}

show_lib_table() {
    ${sync} && update_db_cache
    msg_table_header "${tableQ}" "Repo" "Package" "Library"
    query_db
}

#}}}

#{{{ check db

is_db_entry() {
    local pkgname="$1" repo="${REPOS[$2]}"

    if [[ -d ${db_cache_dir}/${LINKSDBEXT}/${CARCH}/$repo/$pkgname ]];then
        return 0
    fi
    return 1
}

check_db(){
    local pkgpath="${1%/*}"

    for repo in "${!REPOS[@]}"; do
        local pkgbuild artixver
        [[ -f $pkgpath/$CARCH/$repo/PKGBUILD ]] && pkgbuild=$pkgpath/$CARCH/$repo/PKGBUILD
        [[ -f $pkgpath/repos/$repo-$CARCH/PKGBUILD ]] && pkgbuild=$pkgpath/repos/$repo-$CARCH/PKGBUILD
        [[ -f $pkgpath/repos/$repo-any/PKGBUILD ]] && pkgbuild=$pkgpath/repos/$repo-any/PKGBUILD

        # shellcheck disable=1090
        . "$pkgbuild" 2>/dev/null

        artixver=$(get_full_version)
        for name in "${pkgname[@]}"; do

            if ! is_db_entry "$name-$artixver" "$repo"; then
                msg_row "${tableU}" "$repo" "$name" "$artixver" "false"
            fi

        done
        unset artixver pkgbuild pkgver epoch pkgname pkgbase
    done
}

show_db_table(){
    ${sync} && update_db_cache
    msg_table_header "${tableU}" "Repo" "Package" "Version" "Database"
    tree_loop check_db
}

#}}}

db_cache_dir="${XDG_CACHE_HOME:-$USER_HOME/.cache}/artools"

load_makepkg_config

testing=true
staging=true
unstable=false

upgrades=false
downgrades=false
move=false

sync=false
check=false
query=false

readonly table="%-18s %-18s %-25s %-27s %-27s %-10s"
readonly tableU="%-20s %-35s %-30s %-10s"
readonly tableQ="%-20s %-45s %s"

usage() {
    echo "Usage: ${0##*/} [options] (with -q [libname])"
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -m            Show packages to move'
    echo "    -x            Don't inlcude testing packages"
    echo "    -y            Don't inlcude staging packages"
    echo '    -z            Include unstable kde and gnome'
    echo "    -s            Sync repo databases"
    echo '    -c            Check repos'
    echo "    -q            Query repo databases for so libs"
    echo '    -r <repo>     Repo name to query'
    echo '                  [default: all]'
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

opts='r:qcsudmxyzh'

while getopts "${opts}" arg; do
    case "${arg}" in
        u) upgrades=true ;;
        d) downgrades=true ;;
        m) move=true ;;
        s) sync=true ;;
        c) check=true ;;
        q) query=true ;;
        r) searchrepos=("$OPTARG") ;;
        x) testing=false ;;
        y) staging=false ;;
        z) unstable=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

library="$1"; shift

set_arch_repos "$testing" "$staging" "$unstable"

#{{{ assoc repos array
declare -A REPOS=(
    [${valid_names[0]}]=system
    [${valid_names[1]}]=world
    [${valid_names[2]}]=galaxy
    [${valid_names[3]}]=lib32
    [${valid_names[4]}]=gremlins
    [${valid_names[5]}]=galaxy-gremlins
    [${valid_names[6]}]=lib32-gremlins
    [${valid_names[7]}]=goblins
    [${valid_names[8]}]=galaxy-goblins
    [${valid_names[9]}]=lib32-goblins
    [${valid_names[11]}]=kde-wobble
    [${valid_names[12]}]=gnome-wobble
)

searchrepos=(
    "${REPOS[${valid_names[11]}]}"
    "${REPOS[${valid_names[12]}]}"
    "${REPOS[${valid_names[7]}]}"
    "${REPOS[${valid_names[8]}]}"
    "${REPOS[${valid_names[9]}]}"
    "${REPOS[${valid_names[4]}]}"
    "${REPOS[${valid_names[5]}]}"
    "${REPOS[${valid_names[6]}]}"
    "${REPOS[${valid_names[0]}]}"
    "${REPOS[${valid_names[1]}]}"
    "${REPOS[${valid_names[2]}]}"
    "${REPOS[${valid_names[3]}]}"
)
#}}}

${move} && show_move_table

${upgrades} && show_upgrades_table

${downgrades} && show_downgrades_table

${check} && show_db_table

${query} && show_lib_table
