#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/util-base.sh)
m4_include(lib/util-pkg.sh)
m4_include(lib/base/message.sh)
m4_include(lib/pkg/git.sh)
m4_include(lib/pkg/repo.sh)

#{{{ functions

push_tree(){
    local tree="$1"
    msg "Update (%s)" "${tree}"
    git push origin master
}

subrepo_push(){
    local pkg="$1"
    msg2 "Subrepo push (%s)" "$pkg"
    git subrepo push "$pkg" || die "%s push failed" "$pkg"
}

subrepo_clean(){
    local pkg="$1"
    msg2 "Subrepo clean (%s)" "$pkg"
    git subrepo clean "$pkg"
}

subrepo_pull(){
    local pkg="$1"
    msg2 "Subrepo pull (%s)" "$pkg"
    git subrepo pull "$pkg"
}

prepare_commit(){
    # create new layout, copy & remove repos
    if [[ -d repos ]]; then
        msg "Switching to new layout ..."
        [[ ! -d "$CARCH" ]] && mkdir "$CARCH"

        for r in repos/*; do
            local name noarch
            name=${r#*/}
            noarch=${name%-*}
            mkdir "$CARCH/${noarch}"
            cp repos/"${name}"/* "$CARCH/${noarch}/"
            git add "$CARCH/${noarch}"
        done

        git rm -r repos
        git commit -m "switch to new repo layout"
        msg "Done switch"
    fi

    if [[ $action == 'add' ]] || [[ $action == 'move' ]] ;then
        [[ -d "$CARCH/${REPO_DEST}" ]] && git rm -r "$CARCH/${REPO_DEST}"
        [[ ! -d "$CARCH" ]] && mkdir "$CARCH"
        [[ ! -d "$CARCH/${REPO_DEST}" ]] && mkdir "$CARCH/${REPO_DEST}"
    fi
}

check_rebuild(){
    if [[ -d "$CARCH"/"${valid_names[10]}" ]] \
    && [[ "${REPO_DEST}" == "${valid_names[7]}" ]]; then
        git rm -r "$CARCH"/"${valid_names[10]}"
        git commit -m "switch from ${valid_names[10]} to ${valid_names[7]}"
    elif [[ -d "$CARCH"/"${valid_names[7]}" ]] \
    && [[ "${REPO_DEST}" == "${valid_names[10]}" ]]; then
        git rm -r "$CARCH"/"${valid_names[7]}"
        git commit -m "switch from ${valid_names[7]} to ${valid_names[10]}"
    fi
}

check_team(){
    if [[ "${REPO_SRC}" == "${valid_names[0]}" \
    && "${REPO_DEST}" == "${valid_names[1]}" ]] || \
        [[ "${REPO_SRC}" == "${valid_names[1]}" \
        && "${REPO_DEST}" == "${valid_names[0]}" ]] || \
        [[ "${REPO_SRC}" == "${valid_names[1]}" \
        && "${REPO_DEST}" == "${valid_names[2]}" ]] || \
        [[ "${REPO_SRC}" == "${valid_names[2]}" \
        && "${REPO_DEST}" == "${valid_names[1]}" ]] ;then

        local org
        org=$(get_pkg_org "${PACKAGE}")
        add_repo_to_team "${PACKAGE}" "$org" "${REPO_DEST}"
        remove_repo_from_team "${PACKAGE}" "$org" "${REPO_SRC}"
    fi
}

path_config() {
    [[ "${REPO_SRC}" != 'trunk' ]] && pkgbuild="$CARCH/${REPO_SRC}"/PKGBUILD

    if [[ ! -f "$pkgbuild" ]]; then
        pkgbuild=repos/"${REPO_SRC}-${CARCH}"/PKGBUILD
        [[ -f repos/"${REPO_SRC}"-any/PKGBUILD ]] && pkgbuild=repos/"${REPO_SRC}"-any/PKGBUILD
    fi

    # shellcheck disable=1090
    . "$pkgbuild"
}

commit_pkg() {
    local commit_msg pkg
    if ${remove};then
        action='remove'
        if [[ "${REPO_SRC}" == 'trunk' ]];then
            pkg=${PACKAGE}
            git rm -r trunk
        else
            pkg="${PACKAGE}-$(get_full_version)"

            prepare_commit

            git rm -r "$CARCH/${REPO_SRC}"
        fi
        commit_msg="[${REPO_SRC}] '$pkg' ${action}"
        msg "Action: %s" "$commit_msg"
    else
        action='modify'
        commit_msg="[${REPO_SRC}] '${PACKAGE}-$(get_full_version)' ${action}"
        msg "Action: %s" "$commit_msg"
        git add .
    fi
    git commit -m "$commit_msg"
}

repo_commit_pkg() {
    local commit_msg
    if [[ "${REPO_SRC}" == 'trunk' ]];then
        action='add'

        prepare_commit
        check_rebuild

        cp trunk/* "$CARCH/${REPO_DEST}"/
    else
        action='move'
        [[ ! -f $pkgbuild ]] && die "%s does not exist!" "$pkgbuild"

        prepare_commit

        cp "$CARCH/${REPO_SRC}"/* "$CARCH/${REPO_DEST}"/
        git rm -r "$CARCH/${REPO_SRC}"
    fi
    commit_msg="[${REPO_SRC}] -> [${REPO_DEST}] '${PACKAGE}-$(get_full_version)' ${action}"
    msg "Action: %s" "$commit_msg"

    git add .
    git commit -m "$commit_msg"
}

run(){
    local artixpath head group
    artixpath=$(find_pkg "${TREE_DIR_ARTIX}" "${PACKAGE}")
    if [[ -n ${artixpath} ]];then
        group=${artixpath%/*}
        cd "${group}" || return
        head=$(get_local_head)

        cd "${artixpath}" || return

        path_config

        if [[ "${cmd}" == 'commitpkg' ]];then
            commit_pkg
        else
            repo_commit_pkg
        fi

        cd "${group}" || return

        ${push} && pull_tree "${group##*/}" "$head"
#         subrepo_pull "${PACKAGE}"
        subrepo_push "${PACKAGE}"
        subrepo_clean "${PACKAGE}"

        ${push} && push_tree "${group##*/}"

        git prune

        [[ "${cmd}" != 'commitpkg' ]] && check_team
    else
        die "Package '%s' does not exist!" "${PACKAGE}"
    fi
}

is_valid_repo(){
    local _valid=trunk
    for repo in "${valid_names[@]}"; do
        _valid=${repo:-}${repo:+|}$_valid
    done
    eval "case ${REPO_SRC} in
        ${_valid}) return 0 ;;
        *) return 1 ;;
    esac"
}

#}}}

load_makepkg_config

load_valid_names

REPO_SRC='trunk'
PACKAGE=''
remove=false
push=false

pkgbuild=trunk/PKGBUILD

cmd=${0##*/}
REPO_DEST=${cmd%pkg}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -s <name>          Source repository [default:${REPO_SRC}]"
    echo '    -p <pkg>           Package name'
    echo '    -r                 Delete from repo (commitpkg only)'
    echo '    -u                 Push'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit "$1"
}

opts='p:s:urh'

while getopts "${opts}" arg; do
    case "${arg}" in
        s) REPO_SRC="$OPTARG" ;;
        p) PACKAGE="$OPTARG" ;;
        r) remove=true ;;
        u) push=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

if is_valid_repo;then
    run
else
    die "source repository '%s' is not valid!" "${REPO_SRC}"
fi
