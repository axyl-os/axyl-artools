#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

. @libdir@/artools/util-base.sh
. @libdir@/artools/util-pkg.sh

pull_tree_arch(){
    cd ${TREE_DIR_ARCH}
    for tree in ${TREE_NAMES_ARCH[@]};do
        if [[ -d ${tree} ]];then
            cd ${tree}
            pull_tree "${tree}" "$(get_local_head)" "Arch"
            cd ..
        else
            clone_tree "${HOST_TREE_ARCH}" "${tree}" "Arch"
        fi
    done
}

pull_tree_artix(){
    local repos=("$1")
    cd ${TREE_DIR_ARTIX}
    for tree in ${repos[@]};do
        if [[ -d ${tree} ]];then
            config_tree "${tree}"
            cd ${tree}
            pull_tree "${tree}" "$(get_local_head)"
            cd ..
        else
            clone_tree "${HOST_TREE_ARTIX}" "${tree}"
            config_tree "${tree}"
        fi
    done
}

sync_pkg(){
    local rsync_args=(-aWxvci --progress --delete-before --no-R --no-implied-dirs)
    local src="$1" dest="$2"

    rsync "${rsync_args[@]}" $src/ $dest/
}

show_deps(){
    local src="$1" repo="$2"

    . $src/PKGBUILD 2>/dev/null

    [[ $arch == 'any' ]] && CARCH=any

    local archver=$(get_full_version)

    msg2 "repo: %s" "$repo"
    [[ -n ${pkgbase} ]] && msg2 "pkgbase: %s" "${pkgbase}"
    msg2 "pkgname: %s" "${pkgname[*]}"
    [[ -n $pkgdesc ]] && msg2 "pkgdesc: %s" "${pkgdesc}"
    msg2 "Arch Version: %s" "$archver"
    msg2 "arch: %s" "$CARCH"

    [[ -n ${makedepends[@]} ]] && msg2 "makedepends: %s" "${makedepends[*]}"
    [[ -n ${checkdepends[@]} ]] && msg2 "checkdepends: %s" "${checkdepends[*]}"
    [[ -n ${depends[@]} ]] && msg2 "depends: %s" "${depends[*]}"
    [[ -n ${optdepends[@]} ]] && msg2 "optdepends: %s" "${optdepends[@]}"
}

subrepo_new(){
    local group="$1" team="$2"
    local dest=${TREE_DIR_ARTIX}/$group/${PACKAGE}/trunk

    cd ${TREE_DIR_ARTIX}/$group

    local org=$(get_pkg_org "${PACKAGE}")

    create_repo "${PACKAGE}" "$org"

    add_repo_to_team "${PACKAGE}" "$org" "$team"

    subrepo_clone "${PACKAGE}" "$org"

    prepare_dir "$dest"

    commit_jenkins_files "${PACKAGE}"
}

from_arch(){
    local src= dest=

    cd ${TREE_DIR_ARTIX}

    local git_tree_arch=$(find_tree "${TREE_DIR_ARCH}" "${PACKAGE}")
    [[ -z $git_tree_arch ]] && die "Package '%s' does not exist!" "${PACKAGE}"

    local package=${TREE_DIR_ARCH}/$git_tree_arch/${PACKAGE}
    local repo=$(find_repo "$package" "${staging}" "${unstable}")

    src=$package/repos/$repo

    local git_tree_artix=$(find_tree "${TREE_DIR_ARTIX}" "${PACKAGE}")
    local tree_dir=$(get_artix_tree "${PACKAGE}" "$git_tree_artix" "$git_tree_arch")

    dest=${TREE_DIR_ARTIX}/$tree_dir/${PACKAGE}/trunk

    msg "tree: %s" "$tree_dir"
    show_deps "$src" "$repo"

    if [[ -d $dest ]];then

        cd ${TREE_DIR_ARTIX}/$git_tree_artix

        . $dest/PKGBUILD 2>/dev/null
        local artixver=$(get_full_version)

        msg2 "Artix Version: %s" "$artixver"
    else
        subrepo_new "$tree_dir" "$git_tree_arch"
    fi

    msg "Sync (%s) from [%s] to [%s]" "${PACKAGE}" "$git_tree_arch" "$tree_dir"

    sync_pkg "$src" "$dest"
    patch_pkg "${PACKAGE}"
}

view_build(){
    local src=
    local git_tree_arch=$(find_tree "${TREE_DIR_ARCH}" "${PACKAGE}")
    [[ -z $git_tree_arch ]] && die "Package '%s' does not exist!" "${PACKAGE}"

    local pkg_path=${TREE_DIR_ARCH}/$git_tree_arch/${PACKAGE}
    local repo=$(find_repo "$pkg_path" "${staging}" "${unstable}")

    src=$pkg_path/repos/$repo

    show_deps "$src" "$repo"
}

check_tree(){
    local git_tree_arch=$(find_tree "${TREE_DIR_ARCH}" "${PACKAGE}")
    [[ -z $git_tree_arch ]] && die "Package '%s' does not exist!" "${PACKAGE}"
    local git_tree_artix=$(find_tree "${TREE_DIR_ARTIX}" "${PACKAGE}")
    local tree_dir=$(get_artix_tree "${PACKAGE}" "$git_tree_artix" "$git_tree_arch")
    msg "tree_dir: %s" "$tree_dir"
    [[ -z $git_tree_artix ]] && msg2 "exists: %s" "no"
    [[ -n $git_tree_artix ]] && msg2 "exists: %s" "yes"
}

sync_repos(){
    ${sync_arch} && pull_tree_arch
    if ${sync_artix};then
        if ${sync_group}; then
            pull_tree_artix "${GROUP}"
        else
            pull_tree_artix "${TREE_NAMES_ARTIX[*]}"
        fi
    fi
}

load_user_info

load_config "${USERCONFDIR}/artools/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${USERCONFDIR}/pacman/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

sync=false
sync_arch=true
sync_artix=true
import=false
view=false
createnew=false
conf=false
unstable=false
staging=true
sync_group=false
check=false

PACKAGE=''

TEAM=${TREE_NAMES_ARTIX[0]}
GROUP=${TREE_NAMES_ARTIX[0]}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -p <pkg>      Package name'
    echo '    -t <team>     Team name (only with -n)'
    echo "                  [default: ${TEAM}]"
    echo '    -g <group>    Group name, the superrepo (only with -n or -s)'
    echo "                  [default: ${GROUP}]"
    echo "    -s            Clone or pull repos"
    echo "    -z            Don't clone or pull arch repos"
    echo "    -y            Don't clone or pull artix repos"
    echo '    -i            Import a package from arch repos'
    echo '    -n            Make new remote subrepo and clone it'
    echo '    -u            Include kde & gnome unstable (only with -i)'
    echo '    -w            Exclude staging (only with -i)'
    echo '    -v            Check if a package is in the artix tree(s)'
    echo '    -c            View package depends'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:t:g:uwsinzycvh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) PACKAGE="$OPTARG" ;;
        t) TEAM="$OPTARG" ;;
        g) GROUP="$OPTARG"; sync_group=true ;;
        s) sync=true ;;
        z) sync_arch=false ;;
        y) sync_artix=false ;;
        i) import=true ;;
        n) createnew=true ;;
        w) staging=false ;;
        u) unstable=true ;;
        c) check=true ;;
        v) view=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

prepare_dir "${TREE_DIR_ARTIX}"
prepare_dir "${TREE_DIR_ARCH}"

${sync} && sync_repos

${view} && view_build

${check} && check_tree

${import} && from_arch

${createnew} && subrepo_new
