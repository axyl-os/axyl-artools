#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

. @libdir@/artools/util-base.sh
. @libdir@/artools/util-iso.sh

prepare_build(){
    timer_start=$(get_timer)

    load_profile "${PROFILE}"

    local pacman_conf pac_file="pacman-default.conf"

    case "${REPOSITORY}" in
        'gremlins'|'goblins') pac_file="pacman-${REPOSITORY}.conf" ;;
    esac

    pacman_conf="${DATADIR}/$pac_file"
    [[ -f ${USERCONFDIR}/artools/$pac_file ]] && pacman_conf="${USERCONFDIR}/artools/$pac_file"

    iso_file=$(gen_iso_fn).iso

    iso_label="ARTIX_$(date +%Y%m)"

    mkchroot_args+=(-C ${pacman_conf} -m)
    work_dir=${CHROOTS_ISO}/${PROFILE}/${ARCH}

    iso_dir="${ISO_POOL}/${PROFILE}"

    iso_root=${CHROOTS_ISO}/${PROFILE}/iso
    mnt_dir=${CHROOTS_ISO}/${PROFILE}/mnt
    prepare_dir "${mnt_dir}"
    prepare_dir "${iso_dir}"
    prepare_dir "${iso_root}"
}

display_settings(){
    msg "OPTIONS:"
    msg2 "PROFILE: %s" "${PROFILE}"
    msg2 "INITSYS: %s" "${INITSYS}"
    [[ -n ${GPG_KEY} ]] && msg2 "GPG_KEY: %s" "${GPG_KEY}"

    msg "ISO SETTINGS:"
    msg2 "ISO_VERSION: %s" "${ISO_VERSION}"

    msg "BUILD:"
    show_profile
}

build(){
    msg "Start building [%s]" "${PROFILE}"
    if ${clean_first};then
        for copy in "${work_dir}"/*; do
            [[ -d $copy ]] || continue
            msg2 "Deleting chroot copy '%s'..." "$(basename "${copy}")"

            lock 9 "$copy.lock" "Locking chroot copy '%s'" "$copy"

            subvolume_delete_recursive "${copy}"
            rm -rf --one-file-system "${copy}"
        done
        lock_close 9

        rm -rf --one-file-system "${work_dir}"
        clean_iso_root "${iso_root}"
    fi

    if ${iso_only}; then
        [[ ! -d ${work_dir} ]] && die "Create images: %s -p %s -x" "${cmd}" "${PROFILE}"
        compress_images
        exit 1
    fi
    if ${images_only}; then
        prepare_images
        warning "Continue compress: %s -p %s -zc ..." "${cmd}" "${PROFILE}"
        exit 1
    else
        prepare_images
        compress_images
    fi
    msg "Finished building [%s]" "${PROFILE}"
    show_elapsed_time "${FUNCNAME}" "${timer_start}"
}

load_user_info

load_config "${USERCONFDIR}/artools/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"

clean_first=true
pretend=false
images_only=false
iso_only=false
log=false
persist=false

mkchroot_args=()
cmd=${0##*/}

REPOSITORY=${cmd##*-}

usage() {
    echo "Usage: ${cmd} [options]"
    echo "    -p <profile>       Profile [default: ${PROFILE}]"
    echo '    -r <dir>           Chroots directory'
    echo "                       [default: ${CHROOTS_ISO}]"
    echo '    -t <dir>           Target directory'
    echo "                       [default: ${ISO_POOL}]"
    echo '    -i <name>          Init system to use'
    echo "                       [default: ${INITSYS}]"
    echo '    -g <key>           The gpg key for sfs signing'
    echo "                       [default: ${GPG_KEY}]"
    echo '    -m                 Set SquashFS image mode to persistence'
    echo '    -c                 Disable clean work dir'
    echo '    -x                 Build images only'
    echo '    -z                 Generate iso only'
    echo '                       Requires pre built images (-x)'
    echo '    -l                 Log to file'
    echo '    -q                 Query settings and pretend build'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:r:t:i:g:czxmlqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) PROFILE="$OPTARG" ;;
        r) CHROOTS_ISO="$OPTARG" ;;
        t) ISO_POOL="$OPTARG" ;;
        i) INITSYS="$OPTARG" ;;
        g) GPG_KEY="$OPTARG" ;;
        c) clean_first=false ;;
        x) images_only=true ;;
        z) iso_only=true ;;
        m) persist=true ;;
        l) log=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

check_root

prepare_traps

prepare_build

${pretend} && display_settings && exit 1

build
